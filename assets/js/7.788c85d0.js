(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{400:function(t,e,s){t.exports=s.p+"assets/img/pull.059671b2.png"},415:function(t,e,s){"use strict";s.r(e);var a=s(56),v=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git常用指令记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git常用指令记录"}},[t._v("#")]),t._v(" git常用指令记录")]),t._v(" "),a("blockquote",[a("p",[t._v("基于自己使用习惯记录\n没事多看看\n一下所有内容都是通过指令进行处理")])]),t._v(" "),a("h2",{attrs:{id:"基础内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础内容"}},[t._v("#")]),t._v(" 基础内容")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("git status")]),t._v(" "),a("p",[t._v("查看工作区的内容")])]),t._v(" "),a("li",[a("p",[t._v("git add xx/.")]),t._v(" "),a("p",[t._v("提交 "),a("code",[t._v("特定文件/所有文件")]),t._v(" 进入"),a("code",[t._v("暂存区")])])]),t._v(" "),a("li",[a("p",[t._v("git commit -m 'xxx'")]),t._v(" "),a("p",[t._v("提交"),a("code",[t._v("暂存区的内容")]),t._v("进入分支，xxx为提交描述")])])]),t._v(" "),a("h2",{attrs:{id:"内容删除-回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容删除-回退"}},[t._v("#")]),t._v(" 内容删除/回退")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("rm xx")]),t._v(" "),a("p",[t._v("删除新增xx(文件名/文件夹名)")])]),t._v(" "),a("li",[a("p",[t._v("git restore readme.md")]),t._v(" "),a("p",[a("code",[t._v("xxx未进入暂存区")]),t._v("(未使用git add)，取消readme.md(文件名/文件夹名)的修改。")])]),t._v(" "),a("li",[a("p",[t._v("git reset readme.md")]),t._v(" "),a("p",[a("code",[t._v("xxx进入暂存区")]),t._v("(使用了git add)，将readme.md移除暂存区，进入工作区。")])]),t._v(" "),a("li",[a("p",[t._v("git reset")]),t._v(" "),a("p",[t._v("git reset 命令用于回退版本，可以指定退回某一次提交的版本(恢复修改在工作区中)。")]),t._v(" "),a("p",[t._v("详细内容为：git reset [--soft | --mixed | --hard] [HEAD]")]),t._v(" "),a("ul",[a("li",[t._v("--mixed 为默认，可以不用带该参数，用于"),a("code",[t._v("重置暂存区")]),t._v("的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD^            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回退所有内容到上一个版本，对应修改保存在工作区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD^ readme.md  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回退readme.md  文件的版本到上一个版本  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset 052e             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回退到指定版本，对应修改保存在工作区")]),t._v("\n")])])]),a("ul",[a("li",[t._v("--soft 参数用于回退到某个版本(恢复修改在暂存区中)。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft HEAD~3 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回退上上上一个版本，保留修改内容到暂存区")]),t._v("\n")])])]),a("ul",[a("li",[t._v("--hard 参数"),a("code",[t._v("撤销")]),t._v("工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset –hard HEAD~3  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回退上上上一个版本  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset –hard bae128  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回退到某个版本回退点之前的所有信息。 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard origin/master    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将本地的状态回退到和远程的一样 ")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("git branch (branchname)")]),t._v(" "),a("p",[t._v("基于当前分支内容，新建分支。")])]),t._v(" "),a("li",[a("p",[t._v("git checkout (branchname)")]),t._v(" "),a("p",[t._v("切换分支。")])]),t._v(" "),a("li",[a("p",[t._v("git checkout -b (branchname)")]),t._v(" "),a("p",[t._v("创建分支，并且切换到新建分支中。")])]),t._v(" "),a("li",[a("p",[t._v("git branch")]),t._v(" "),a("p",[t._v("查看当前有哪些分支，以及当前所处哪个分支。")])]),t._v(" "),a("li",[a("p",[t._v("git merge dev")]),t._v(" "),a("p",[t._v("合并dev分支内容到当前分支。")])]),t._v(" "),a("li",[a("p",[t._v("git branch -d (branchname)")]),t._v(" "),a("p",[t._v("删除分支。")])])]),t._v(" "),a("h2",{attrs:{id:"远程问题-github为例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程问题-github为例"}},[t._v("#")]),t._v(" 远程问题(gitHub为例)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("git remote add origin git@github.com:hll001/hll001.github.io.git")]),t._v(" "),a("p",[t._v("添加一个新的远程仓库，指定一个简单的名字为"),a("code",[t._v("origin")]),t._v("，仓库ssh地址为"),a("code",[t._v("git@github.com:hll001/hll001.github.io.git")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("git remote")]),t._v(" "),a("p",[t._v("查看当前配置有哪些远程仓库， -v 参数你还可以看到每个别名的实际链接地址。")])]),t._v(" "),a("li",[a("p",[t._v("git remote rm origin")]),t._v(" "),a("p",[t._v("删除远程origin分支")])]),t._v(" "),a("li",[a("p",[t._v("git push -u origin master")]),t._v(" "),a("p",[t._v("第一次时，本地库的所有内容推送到远程origin库的master分支。")]),t._v(" "),a("p",[t._v("后面在提交除去-u参数即可。")])]),t._v(" "),a("li",[a("p",[t._v("git clone git@github.com:hll001/hll001.github.io.git")]),t._v(" "),a("p",[t._v("从远程ssh地址克隆一个本地库")])])]),t._v(" "),a("h2",{attrs:{id:"更新-提取远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新-提取远程仓库"}},[t._v("#")]),t._v(" 更新/提取远程仓库")]),t._v(" "),a("p",[t._v("主要方式有两种"),a("code",[t._v("git pull")]),t._v(" 和 "),a("code",[t._v("git fetch")]),t._v(" + "),a("code",[t._v("git merge")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(400),alt:"提取远程仓库示意图"}})]),t._v(" "),a("ul",[a("li",[a("p",[t._v("git fetch + git merge")]),t._v(" "),a("p",[a("code",[t._v("git fetch")])]),t._v(" "),a("blockquote",[a("p",[t._v("获取远程仓库中最新的历史记录在本地，但是该内容会在自动建立的FETCH_HEAD的分支中。注意此时的内容并没有合并到本地只是从远程拉取到本地了。")])]),t._v(" "),a("p",[a("code",[t._v("git merge")])]),t._v(" "),a("blockquote",[a("p",[t._v("合并内容到当前分支。执行在"),a("code",[t._v("git fetch")]),t._v("之后，从远端仓库提取数据并将FETCH_HEAD分支合并到当前分支，同git merge FETCH_HEAD。")])])]),t._v(" "),a("li",[a("p",[t._v("git pull")]),t._v(" "),a("p",[t._v("用于从远程获取代码并合并本地的版本。git pull 其实就是 git fetch 和 git merge FETCH_HEAD 的简写")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull                          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新操作。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新操作。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新操作,将远程主机 origin 的 master 分支拉取过来。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master:brantest   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新操作,将远程主机 origin 的 master 分支拉取过来,与本地的 brantest 分支合并。")]),t._v("\n")])])])])])])}),[],!1,null,null,null);e.default=v.exports}}]);